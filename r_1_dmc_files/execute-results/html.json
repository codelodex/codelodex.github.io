{
  "hash": "130aab0a3ea83f21de6801b25caf174c",
  "result": {
    "markdown": "---\ntitle: \"Data Managment & Cleaning\"\n---\n\n::: {.cell}\n\n:::\n\n\n# Dataframe Information\n\n### The structure of a dataframe \n\n::: {.cell}\n\n```{.r .cell-code}\nstr(fp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t85 obs. of  10 variables:\n $ fedId      : int  1 2 3 4 5 6 7 8 9 10 ...\n $ author     : chr  \"Hamilton\" \"Jay\" \"Jay\" \"Jay\" ...\n $ title      : chr  \"General Introduction \" \"Concerning Dangers from Foreign Force and Influence \" \"The Same Subject Continued (Concerning Dangers From Foreign Force and Influence) \" \"The Same Subject Continued (Concerning Dangers From Foreign Force and Influence) \" ...\n $ pubDate    : chr  \"1787-10-27\" \"1787-10-31\" \"1787-11-03\" \"1787-11-07\" ...\n $ publication: chr  \"Independent Journal\" \"Independent Journal\" \"Independent Journal\" \"Independent Journal\" ...\n $ text       : chr  \"AFTER an unequivocal experience of the inefficacy of the subsisting federal government, you are called upon to \"| __truncated__ \"WHEN the people of America reflect that they are now called upon to decide a question, which, in its consequenc\"| __truncated__ \"IT IS not a new observation that the people of any country (if, like the Americans, intelligent and wellinforme\"| __truncated__ \"MY LAST paper assigned several reasons why the safety of the people would be best secured by union against the \"| __truncated__ ...\n $ daysPrevFP : int  0 4 3 4 3 4 1 5 1 1 ...\n $ daysConv   : int  40 44 47 51 54 58 59 64 65 66 ...\n $ daysCato1  : int  30 34 37 41 44 48 49 54 55 56 ...\n $ daysBrutus1: int  9 13 16 20 23 27 28 33 34 35 ...\n```\n:::\n:::\n\n\n### A variable's datatype\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(fp$author)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n### Rename a variable\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(fp)[names(fp) == \"text\"] = \"essay\"\n```\n:::\n\n\n### A variable's column number based on the variable's name\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(colnames(fp) == \"author\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n### All unique values in a variable\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(fp$author)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hamilton\"               \"Jay\"                    \"Madison\"               \n[4] \"Madison, with Hamilton\" \"DISPUTED\"              \n```\n:::\n:::\n\n\n### Number of unique values in a variable\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(fp$author))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n### See if a variable contains a certain observation\nWill return `TRUE` if the observation appears at least once in the variable and\n`FALSE` if it does not appear in the variable\n\n::: {.cell}\n\n```{.r .cell-code}\nany(fp$author == 'Washington')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n### Number of times an observation appears in a variable\nWill return a number\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(fp$author[fp$author == 'Hamilton'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 51\n```\n:::\n:::\n\n\n### Unique values for one variable when a different variable meets a certain condition\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(fp$fedId[fp$author == \"Jay\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  3  4  5 64\n```\n:::\n:::\n\n\n\n#  Dataframe Managment\n\n### Sort dataframe\nLow to high, by a single variable\n\n::: {.cell}\n\n```{.r .cell-code}\n# numeric\nnew_fp <- fp[order(fp$fedId), ]\n# character (i.e., alphabetical)\nnew_fp <- fp[order(fp$title), ]\n```\n:::\n\nHigh to low, by a single variable\n\n::: {.cell}\n\n```{.r .cell-code}\n# numeric\nnew_fp <- fp[order(-fp$fedId), ]\n# character (i.e., reverse alphabetical)\nnew_fp <- fp[order(fp$title, decreasing = TRUE), ]\n```\n:::\n\nLow to high, by multiple variables\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_fp <- fp[order(fp$title, fp$author), ]\n```\n:::\n\nHigh to low, by multiple variables\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_fp <- fp[order(fp$author, fp$fedId, decreasing = TRUE), ]\n```\n:::\n\n\n### Remove rows in a dataframe\n\n::: {.cell}\n\n```{.r .cell-code}\n# one variable\nnew_fp = fp[-2, ]\n# multiple variables\nnew_fp = fp[-c(2:5, 7, 50), ]\n```\n:::\n\n\n### Keep variables in a dataframe\n\nUsing bracket notation\n\n::: {.cell}\n\n```{.r .cell-code}\n# one variable\nnew_fp = fp[, \"fedId\", drop = FALSE]\n# multiple variables\nnew_fp = fp[, c(\"fedId\", \"author\", \"pubDate\")]\n```\n:::\n\nUsing the `subset` function\n\n::: {.cell}\n\n```{.r .cell-code}\n# one variable\nnew_fp = subset(fp, select = fedId)\n# multiple variables\nnew_fp = subset(fp, select = c(fedId, author, pubDate))\n```\n:::\n\nUsing the `data.frame` function\n\n::: {.cell}\n\n```{.r .cell-code}\n# one variable\nnew_fp = data.frame(\"fedId\" = fp$fedId)\n# multiple variables\nnew_fp = data.frame(\"fedId\" = fp$fedId,\n                    \"author\" = fp$author,\n                    \"pubDate\" = fp$pubDate)\n```\n:::\n\nBy specifying a vector of variables\n\n::: {.cell}\n\n```{.r .cell-code}\n# specify a single unidimensional vector\nkeepThisVar = \"fedId\"\n# specify a multidimensional vector\nkeepTheseVars = c(\"fedId\", \"author\", \"pubDate\")\n\n# using bracket notation\n# one variable\nnew_fp = fp[, keepThisVar, drop = FALSE]\n# multiple variables\nnew_fp = fp[, keepTheseVars]\n\n# using the subset() function\n# one variable\nnew_fp = subset(fp, select = keepThisVar)\n# multiple variables\nnew_fp = subset(fp, select = keepTheseVars)\n```\n:::\n\nBy column number\n\n::: {.cell}\n\n```{.r .cell-code}\n### by column number\n# using bracket notation\n# one variable\nnew_fp = fp[, 1, drop = FALSE]\n# multiple variables\nnew_fp = fp[, c(1, 2, 4)]\n```\n:::\n\n\n\n### Remove variables from a dataframe\n\nBy setting the variable to NULL\n\n::: {.cell}\n\n```{.r .cell-code}\nfp$author = NULL\n```\n:::\n\nUsing bracket notation\n\n::: {.cell}\n\n```{.r .cell-code}\n# one variable\nnew_fp = fp[ , !(names(fp) %in% \"fedId\")]\n# multiple variables\nnew_fp = fp[ , !(names(fp) %in% c(\"fedId\", \"author\", \"pubDate\"))]\n```\n:::\n\nUsing the `subset` function\n\n::: {.cell}\n\n```{.r .cell-code}\n# one variable\nnew_fp = subset(fp, select = -author)\n# multiple variables\nnew_fp = subset(fp, select = -c(fedId, author, pubDate))\n```\n:::\n\nBy specifying a vector of variables\n\n::: {.cell}\n\n```{.r .cell-code}\n# specify a single unidimensional vector\nremoveThisVar = \"fedId\"\n# specify a multidimensional vector\nremoveTheseVars = c(\"fedId\", \"author\", \"pubDate\")\n\n# using bracket notation\n# one variable\nnew_fp = fp[ , !(names(fp) %in% removeThisVar)]\n# multiple variables\nnew_fp = fp[ , !(names(fp) %in% removeTheseVars)]\n```\n:::\n\n\n### Remove all rows when a variable contains a certain value\nUsing bracket notation\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_fp <- fp[!grepl(\"Jay\", fp$author), ]\n```\n:::\n\nUsing the `subset` function\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_fp <- subset(fp, !grepl(\"Jay\", author))\n```\n:::\n\n\n### Rename observations in a variable based on the same variable\nThis code says that when observations in `author` are exactly equal to `Hamilton`,\nrename observations `author` to `Lin-Manuel Miranda`\n\n::: {.cell}\n\n```{.r .cell-code}\nfp$author[fp$author == 'Hamilton'] <- 'Lin-Manuel Miranda'\n```\n:::\n\n\n### Rename observations in a variable based on a different variable\nThis code says, when observations in `author` are exactly equal to `Madison`,\nrename observations `publication` to `Madison Wuz Here`\n\n::: {.cell}\n\n```{.r .cell-code}\nfp$publication[fp$author == 'Madison'] <- 'Madison Wuz Here'\n```\n:::\n\n\n### Check for NA in a variable\nWill return `FALSE` if no NA are present; will return `TRUE` if NA are present\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(fp$author))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n### Remove all rows that contain NA in a variable\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_fp <- subset(fp, !is.na(author))\n```\n:::\n\n\n\n#  Global Environment Managment\n\n### Remove all objects from the Global Environment\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n### Save one object from the Global Environment\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = setdiff(ls(), \"fp\"))\n```\n:::\n\n\n### Save multiple objects from the Global Environment\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = setdiff(ls(), c(\"fp\", \"obj2\", \"obj3\")))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}