---
title: "Data Managment & Cleaning"
---
```{r echo = FALSE}
fp = read.csv("fp.csv")
```

# Dataframe Information

### The structure of a dataframe 
```{r}
str(fp)
```

### A variable's datatype
```{r}
class(fp$author)
```

### Rename a variable
```{r}
names(fp)[names(fp) == "text"] = "essay"
```

### A variable's column number based on the variable's name
```{r}
which(colnames(fp) == "author")
```

### All unique values in a variable
```{r}
unique(fp$author)
```

### Number of unique values in a variable
```{r}
length(unique(fp$author))
```

### See if a variable contains a certain observation
Will return `TRUE` if the observation appears at least once in the variable and
`FALSE` if it does not appear in the variable
```{r}
any(fp$author == 'Washington')
```

### Number of times an observation appears in a variable
Will return a number
```{r}
length(fp$author[fp$author == 'Hamilton'])
```

### Unique values for one variable when a different variable meets a certain condition
```{r}
unique(fp$fedId[fp$author == "Jay"])
```


#  Dataframe Managment

### Sort dataframe
Low to high, by a single variable
```{r}
# numeric
new_fp <- fp[order(fp$fedId), ]
# character (i.e., alphabetical)
new_fp <- fp[order(fp$title), ]
```
High to low, by a single variable
```{r}
# numeric
new_fp <- fp[order(-fp$fedId), ]
# character (i.e., reverse alphabetical)
new_fp <- fp[order(fp$title, decreasing = TRUE), ]
```
Low to high, by multiple variables
```{r}
new_fp <- fp[order(fp$title, fp$author), ]
```
High to low, by multiple variables
```{r}
new_fp <- fp[order(fp$author, fp$fedId, decreasing = TRUE), ]
```

### Remove rows in a dataframe
```{r}
# one variable
new_fp = fp[-2, ]
# multiple variables
new_fp = fp[-c(2:5, 7, 50), ]
```

### Keep variables in a dataframe

Using bracket notation
```{r}
# one variable
new_fp = fp[, "fedId", drop = FALSE]
# multiple variables
new_fp = fp[, c("fedId", "author", "pubDate")]

```
Using the `subset` function
```{r}
# one variable
new_fp = subset(fp, select = fedId)
# multiple variables
new_fp = subset(fp, select = c(fedId, author, pubDate))
```
Using the `data.frame` function
```{r}
# one variable
new_fp = data.frame("fedId" = fp$fedId)
# multiple variables
new_fp = data.frame("fedId" = fp$fedId,
                    "author" = fp$author,
                    "pubDate" = fp$pubDate)
```
By specifying a vector of variables
```{r}
# specify a single unidimensional vector
keepThisVar = "fedId"
# specify a multidimensional vector
keepTheseVars = c("fedId", "author", "pubDate")

# using bracket notation
# one variable
new_fp = fp[, keepThisVar, drop = FALSE]
# multiple variables
new_fp = fp[, keepTheseVars]

# using the subset() function
# one variable
new_fp = subset(fp, select = keepThisVar)
# multiple variables
new_fp = subset(fp, select = keepTheseVars)
```
By column number
```{r}
### by column number
# using bracket notation
# one variable
new_fp = fp[, 1, drop = FALSE]
# multiple variables
new_fp = fp[, c(1, 2, 4)]
```


### Remove variables from a dataframe

By setting the variable to NULL
```{r eval = FALSE}
fp$author = NULL
```
Using bracket notation
```{r}
# one variable
new_fp = fp[ , !(names(fp) %in% "fedId")]
# multiple variables
new_fp = fp[ , !(names(fp) %in% c("fedId", "author", "pubDate"))]
```
Using the `subset` function
```{r}
# one variable
new_fp = subset(fp, select = -author)
# multiple variables
new_fp = subset(fp, select = -c(fedId, author, pubDate))
```
By specifying a vector of variables
```{r}
# specify a single unidimensional vector
removeThisVar = "fedId"
# specify a multidimensional vector
removeTheseVars = c("fedId", "author", "pubDate")

# using bracket notation
# one variable
new_fp = fp[ , !(names(fp) %in% removeThisVar)]
# multiple variables
new_fp = fp[ , !(names(fp) %in% removeTheseVars)]
```

### Remove all rows when a variable contains a certain value
Using bracket notation
```{r}
new_fp <- fp[!grepl("Jay", fp$author), ]
```
Using the `subset` function
```{r}
new_fp <- subset(fp, !grepl("Jay", author))
```

### Rename observations in a variable based on the same variable
This code says that when observations in `author` are exactly equal to `Hamilton`,
rename observations `author` to `Lin-Manuel Miranda`
```{r}
fp$author[fp$author == 'Hamilton'] <- 'Lin-Manuel Miranda'
```

### Rename observations in a variable based on a different variable
This code says, when observations in `author` are exactly equal to `Madison`,
rename observations `publication` to `Madison Wuz Here`
```{r}
fp$publication[fp$author == 'Madison'] <- 'Madison Wuz Here'
```

### Check for NA in a variable
Will return `FALSE` if no NA are present; will return `TRUE` if NA are present
```{r}
any(is.na(fp$author))
```

### Remove all rows that contain NA in a variable
```{r}
new_fp <- subset(fp, !is.na(author))
```


#  Global Environment Managment

### Remove all objects from the Global Environment
```{r}
rm(list = ls())
```

### Save one object from the Global Environment
```{r}
rm(list = setdiff(ls(), "fp"))
```

### Save multiple objects from the Global Environment
```{r}
rm(list = setdiff(ls(), c("fp", "obj2", "obj3")))
```

