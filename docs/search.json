[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome to Codelodex!\nThis website is a work in progress and will be updated frequently.\nPlease feel free to click around to see what I have sett up so far. Check back soon for a proper welcome page.\n-MTC"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This cite was created my Matthew (Matt) T. Cota. Matt is a PhD Student in Political Science at Michigan State University studying the U.S. Supreme Court. For more information, please visit my website: https://matthewtcota.com."
  },
  {
    "objectID": "r.html",
    "href": "r.html",
    "title": "Data Managment & Cleaning",
    "section": "",
    "text": "Basic Math\nMath is fun\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Home",
      "R",
      "Data Managment & Cleaning"
    ]
  },
  {
    "objectID": "stata.html",
    "href": "stata.html",
    "title": "Data Managment & Cleaning",
    "section": "",
    "text": "Math! Math is fun",
    "crumbs": [
      "Home",
      "Stata",
      "Data Managment & Cleaning"
    ]
  },
  {
    "objectID": "regex_r.html",
    "href": "regex_r.html",
    "title": "Regular Expressions in R",
    "section": "",
    "text": "What is a regular expression?"
  },
  {
    "objectID": "dmc_stata.html",
    "href": "dmc_stata.html",
    "title": "Data Managment & Cleaning",
    "section": "",
    "text": "Load in a dataset\n\nuse \"filepath/dataset.dta\", clear"
  },
  {
    "objectID": "dmc_r.html",
    "href": "dmc_r.html",
    "title": "Data Managment & Cleaning",
    "section": "",
    "text": "Basic Math\nMath is fun\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "r_1_gettingstarted.html",
    "href": "r_1_gettingstarted.html",
    "title": "Getting Started",
    "section": "",
    "text": "All code examples will the Federalist Papers dataset that can be found in the Data"
  },
  {
    "objectID": "gettingstarted.html",
    "href": "gettingstarted.html",
    "title": "Getting Started",
    "section": "",
    "text": "For now, all code examples in R and Stata will use a dataset on the Federalist Papers that can be found on this page. This dataset includes a host of different datatypes that can be manipulated to learn different coding techniques and tricks. This dataset is referred to as fp throughout the site, and appears as the fp object in the R code.\nThis dataset is a modifed version of the tidy_federalist.RDS dataset I retrieved on June 27, 2025 from Levi Nicklas’ public GitHub Repository that houses data on the Federalist Papers. The modifications I made include organizing variables and observations in a way I found useful, filling in missing data, creating a few useful variables (e.g., duration between publication), and denoting disputed authorship of some papers (see Mosteller and Wallace 1963, 1964). Full code used to transform Nicklas’ original data into the fp dataset appears in the Data Modifications Code section below.\n\nFederalist Papers Data\nA .csv file of the fp dataset can be downloaded here (recommended for R users).\nA .dta file of the fp dataset can be downloaded here (recommended for Stata users).\nBefore each code chunk in the examples throughout this site, users should load in the fp dataset.\nTo load in the .csv file of the fp dataset in R, run the following code:\n\nfp = read.csv(\"/filepath/fp.dta\")\n\nTo load in the .dta file of the fp dataset in Stata, run the following code:\n\nuse \"/filepath/fp.dta\", clear\n\n\n\nData Modifications Code\n\n# dataset downloaded on 6/27/2025 from https://github.com/Levi-Nicklas/FederalistPapers/blob/main/scripts/Collect_and_CleanData.R \n# dataset creator is Levi Nicklas (GitHub username is Levi-Nicklas)\n# Nicklas acquired the text of the Federalist Papers used to create this dataset from Project Gutenberg, so the text is trustworthy\n\n# load in Nicklas' dataset\nfp = readRDS(\"~/Desktop/tidy_federalist.RDS\")\n\n# rename some variables\nnames(fp)[names(fp) == \"paper_num\"] = \"fedId\"\nnames(fp)[names(fp) == \"Author\"] = \"author\"\n\n# now I modify Nicklas' dataset to my liking by changing obs and changing/adding vars\n# since all papers begin with \"To the People of the State of New York\", I extract all text before this to great the baseline for the title var\nfp$title = gsub(\"To the People of the State of New York.*\", \"\", fp$text)\n# next, I remove everything before \"To the People of the State of New York\" to get each essay on its own\nfp$text = gsub(\".*(?=To the People of the State of New York)\", \"\", fp$text, perl = TRUE)\n# now I remove \"To the People of the State of New York\" to get just the text of the essay\n# all except one paper end with a colon, the one ends with a period, so I include two expressions to capture this\nfp$text = sub(\"To the People of the State of New York: |To the People of the State of New York. \", \"\", fp$text)\n\n# since each paper begins with the author name, the new title var will naturally include that name so I have to remove it\nfp$title = gsub(\"HAMILTON|JAY|MADISON|MADISON, with HAMILTON\", \"\", fp$title)\n\n# create a date variable\n# will be useful for duration analysis!\n# remove anything before a day of the week, since all the pubDates start that way\nfp$pubDate = sub(\".*(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday) ?\", \"\\\\1\", fp$title)\n# remove the trailing period\nfp$pubDate = sub(\"\\\\.\\\\s*$\", \"\", fp$pubDate)\n# an error in Project Gutenberg!\n# says Fed 26 was published on Saturday, December 22, 1788, but it was actually 1787!\n# same with Fed 30, was actually Friday, December 28, 1787\n# fixing now\nfp$pubDate = ifelse(fp$fedId == 26, \"Saturday, December 22, 1787\", fp$pubDate)\nfp$pubDate = ifelse(fp$fedId == 30, \"Friday, December 28, 1787\", fp$pubDate)\n# get in pubDate data format\nfp$pubDate = as.Date(fp$pubDate, format = \"%A, %B %d, %Y\")\n# calculate some durations\nlibrary(lubridate)\nlibrary(dplyr)\n# days since previous paper\nfp &lt;- fp %&gt;%\n  arrange(pubDate) %&gt;%  # Ensure rows are ordered by date\n  mutate(daysPrevFP = as.numeric(pubDate - lag(pubDate)))\n# replace the one NA at the beginning with 0\nfp$daysPrevFP = ifelse(is.na(fp$daysPrevFP), 0, fp$daysPrevFP)\n# days since the end of the Constitutional Convertion (1787-09-17)\nfp$daysConv = round(difftime(fp$pubDate, \"1787-09-17\"))\n# days since the publication of Cato 1 (1787-09-27)\nfp$daysCato1 = round(difftime(fp$pubDate, \"1787-09-27\"))\n# days since the publication of Brutas 1 (1787-10-18)\nfp$daysBrutus1 = round(difftime(fp$pubDate, \"1787-10-18\"))\n\n# there were only four publications for the papers, so I can just use those to create the var\n# create publication variable\n# seems like the words \"For the\" and \"From the\" and \"From\" appear before each publication, using that to get what I want\nfp$publication = sub(\".*(Daily Advertiser|Independent Journal|New York Packet|McLEAN's Edition, New York).*\", ignore.case = TRUE, \"\\\\1\", fp$title)\n# inconsistency in one publication, appears in original text as \"MCLEAN's\" or \"McLEAN's\" so I standardize to the one the appears more often\nfp$publication = sub(\"MCLEAN's\", \"McLEAN's\", fp$publication)\n\n# now I can finally correct the titles\n# it appears that the name of the publication appears after the words \"For the\" and \"From the\"\n# first I remove all text after the publication name and then after those words\nfp$title = sub(\"(Daily Advertiser|Independent Journal|New York Packet|McLEAN's Edition, New York).*\", \"\", ignore.case = TRUE, fp$title)\n# then I do the fors and froms, making sure I don't mess with Fed. 45 that has it in the middle \nfp$title = ifelse(fp$fedId != 45, sub(\"(For the|From the).*\", \"\", ignore.case = TRUE, fp$title), fp$title)\n# fix Fed. 45\nfp$title = ifelse(fp$fedId == 45, sub(\"Considered For the \", \"\", ignore.case = TRUE, fp$title), fp$title)\n# titles for a few papers end with \"from\" in a leftover to indicate publication, but titles in other papers also contain the word \n# I just remove the word from the titles that end with \"from\"\nfp$title &lt;- ifelse(fp$fedId %in% 78:85, sub(\"from\", \"\", ignore.case = TRUE, fp$title), fp$title)\n# remove the trailing period\nfp$title = sub(\"\\\\.\\\\s*$\", \"\", fp$title)\n\n# have only the first letter of each author's name be capitalized\nfp$author = paste(toupper(substr(fp$author, 1, 1)), tolower(substr(fp$author, 2, nchar(fp$author))), sep=\"\")\n\n# the origianl dataset lists Fed. 18, 19, 20 obs for the author var as \"Multiple\" but I want to be more specific\n# so I fix these obs of because it should be \"Madison, with Hamilton\" according to Project Gutenberg\nfp$author = ifelse(fp$author == \"Multiple\", \"Madison, with Hamilton\", fp$author)\n\n# Project Gutenberg attributes each paper to Hamilton, Jay, Madison, or Madison, with Hamilton\n# several papers have disputed authorship\n# according to Mosteller and  Wallace's 1963 article and 1964 book, Fed. 49-58, and 62-63 are disputed\n# I modify the obs for these papers to reflect this, even though multiple scholars have attributed authorship\nfp$author = ifelse(fp$fedId %in% c(49:58, 62, 63), \"DISPUTED\", fp$author)\n# Fed. 18, 19, and 20 are potentially disputed, but not to the degree that the other noted papers are, so I ignore this possibility for now\n\n# organize the variables\nfp = subset(fp, select = c(fedId, author, title, pubDate, publication, text, daysPrevFP, daysConv, daysCato1, daysBrutus1))\n\n# save the data for R\nwrite.csv(fp, \"~/Desktop/fp.csv\", row.names = F)\n# save the data for Stata\nhaven::write_dta(fp, \"~/Desktop/fp.dta\")\n\n\n\nReferences\n\nMosteller, Frederick and David L. Wallace. 1963. “Inference in an authorship problem: A comparative study of discrimination methods applied to the authorship of the disputed Federalist Papers.” Journal of the American Statistical Association 58(302) 275-309.\n\n\nMosteller, Frederick and David L. Wallace. 1964. Inference and disputed authorship: The Federalist. Addison-Wesley.\n\n\nNicklas, Levi. 2020. “FederalistPapers.” GitHub repository. https://github.com/Levi-Nicklas/FederalistPapers"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "This site was created in R using Quarto, and open-source software supported by Posit. The theme and style of the website were come from Quarto’s pre-existing themes using their publicly available code that can be found at https://quarto.org.\nThe inspiration for this site was Vincent Arel-Bundock’s wonderful documentation website for the marginaleffects package, which can be found at https://marginaleffects.com. I have found this website extremely helpful in my own political science research, and hope my website can provide the same coding help that Vincent’s has given me. A citation to the marginaleffects package appears below.\n\nArel-Bundock, Vincent, Noah Greifer, and Andrew Heiss. 2024. “How to Interpret Statistical Models Using marginaleffects for R and Python.” Journal of Statistical Software 111(9) 1-32. doi:10.18637/jss.v111.i09 https://doi.org/10.18637/jss.v111.i09."
  },
  {
    "objectID": "r_1_dmc.html",
    "href": "r_1_dmc.html",
    "title": "Data Managment & Cleaning",
    "section": "",
    "text": "Dataframe Information\n\nThe structure of a dataframe\n\nstr(fp)\n\n'data.frame':   85 obs. of  10 variables:\n $ fedId      : int  1 2 3 4 5 6 7 8 9 10 ...\n $ author     : chr  \"Hamilton\" \"Jay\" \"Jay\" \"Jay\" ...\n $ title      : chr  \"General Introduction \" \"Concerning Dangers from Foreign Force and Influence \" \"The Same Subject Continued (Concerning Dangers From Foreign Force and Influence) \" \"The Same Subject Continued (Concerning Dangers From Foreign Force and Influence) \" ...\n $ pubDate    : chr  \"1787-10-27\" \"1787-10-31\" \"1787-11-03\" \"1787-11-07\" ...\n $ publication: chr  \"Independent Journal\" \"Independent Journal\" \"Independent Journal\" \"Independent Journal\" ...\n $ text       : chr  \"AFTER an unequivocal experience of the inefficacy of the subsisting federal government, you are called upon to \"| __truncated__ \"WHEN the people of America reflect that they are now called upon to decide a question, which, in its consequenc\"| __truncated__ \"IT IS not a new observation that the people of any country (if, like the Americans, intelligent and wellinforme\"| __truncated__ \"MY LAST paper assigned several reasons why the safety of the people would be best secured by union against the \"| __truncated__ ...\n $ daysPrevFP : int  0 4 3 4 3 4 1 5 1 1 ...\n $ daysConv   : int  40 44 47 51 54 58 59 64 65 66 ...\n $ daysCato1  : int  30 34 37 41 44 48 49 54 55 56 ...\n $ daysBrutus1: int  9 13 16 20 23 27 28 33 34 35 ...\n\n\n\n\nA variable’s datatype\n\nclass(fp$author)\n\n[1] \"character\"\n\n\n\n\nRename a variable\n\nnames(fp)[names(fp) == \"text\"] = \"essay\"\n\n\n\nA variable’s column number based on the variable’s name\n\nwhich(colnames(fp) == \"author\")\n\n[1] 2\n\n\n\n\nAll unique values in a variable\n\nunique(fp$author)\n\n[1] \"Hamilton\"               \"Jay\"                    \"Madison\"               \n[4] \"Madison, with Hamilton\" \"DISPUTED\"              \n\n\n\n\nNumber of unique values in a variable\n\nlength(unique(fp$author))\n\n[1] 5\n\n\n\n\nSee if a variable contains a certain observation\nWill return TRUE if the observation appears at least once in the variable and FALSE if it does not appear in the variable\n\nany(fp$author == 'Washington')\n\n[1] FALSE\n\n\n\n\nNumber of times an observation appears in a variable\nWill return a number\n\nlength(fp$author[fp$author == 'Hamilton'])\n\n[1] 51\n\n\n\n\nUnique values for one variable when a different variable meets a certain condition\n\nunique(fp$fedId[fp$author == \"Jay\"])\n\n[1]  2  3  4  5 64\n\n\n\n\n\nDataframe Managment\n\nSort dataframe\nLow to high, by a single variable\n\n# numeric\nnew_fp &lt;- fp[order(fp$fedId), ]\n# character (i.e., alphabetical)\nnew_fp &lt;- fp[order(fp$title), ]\n\nHigh to low, by a single variable\n\n# numeric\nnew_fp &lt;- fp[order(-fp$fedId), ]\n# character (i.e., reverse alphabetical)\nnew_fp &lt;- fp[order(fp$title, decreasing = TRUE), ]\n\nLow to high, by multiple variables\n\nnew_fp &lt;- fp[order(fp$title, fp$author), ]\n\nHigh to low, by multiple variables\n\nnew_fp &lt;- fp[order(fp$author, fp$fedId, decreasing = TRUE), ]\n\n\n\nRemove rows in a dataframe\n\n# one variable\nnew_fp = fp[-2, ]\n# multiple variables\nnew_fp = fp[-c(2:5, 7, 50), ]\n\n\n\nKeep variables in a dataframe\nUsing bracket notation\n\n# one variable\nnew_fp = fp[, \"fedId\", drop = FALSE]\n# multiple variables\nnew_fp = fp[, c(\"fedId\", \"author\", \"pubDate\")]\n\nUsing the subset function\n\n# one variable\nnew_fp = subset(fp, select = fedId)\n# multiple variables\nnew_fp = subset(fp, select = c(fedId, author, pubDate))\n\nUsing the data.frame function\n\n# one variable\nnew_fp = data.frame(\"fedId\" = fp$fedId)\n# multiple variables\nnew_fp = data.frame(\"fedId\" = fp$fedId,\n                    \"author\" = fp$author,\n                    \"pubDate\" = fp$pubDate)\n\nBy specifying a vector of variables\n\n# specify a single unidimensional vector\nkeepThisVar = \"fedId\"\n# specify a multidimensional vector\nkeepTheseVars = c(\"fedId\", \"author\", \"pubDate\")\n\n# using bracket notation\n# one variable\nnew_fp = fp[, keepThisVar, drop = FALSE]\n# multiple variables\nnew_fp = fp[, keepTheseVars]\n\n# using the subset() function\n# one variable\nnew_fp = subset(fp, select = keepThisVar)\n# multiple variables\nnew_fp = subset(fp, select = keepTheseVars)\n\nBy column number\n\n### by column number\n# using bracket notation\n# one variable\nnew_fp = fp[, 1, drop = FALSE]\n# multiple variables\nnew_fp = fp[, c(1, 2, 4)]\n\n\n\nRemove variables from a dataframe\nBy setting the variable to NULL\n\nfp$author = NULL\n\nUsing bracket notation\n\n# one variable\nnew_fp = fp[ , !(names(fp) %in% \"fedId\")]\n# multiple variables\nnew_fp = fp[ , !(names(fp) %in% c(\"fedId\", \"author\", \"pubDate\"))]\n\nUsing the subset function\n\n# one variable\nnew_fp = subset(fp, select = -author)\n# multiple variables\nnew_fp = subset(fp, select = -c(fedId, author, pubDate))\n\nBy specifying a vector of variables\n\n# specify a single unidimensional vector\nremoveThisVar = \"fedId\"\n# specify a multidimensional vector\nremoveTheseVars = c(\"fedId\", \"author\", \"pubDate\")\n\n# using bracket notation\n# one variable\nnew_fp = fp[ , !(names(fp) %in% removeThisVar)]\n# multiple variables\nnew_fp = fp[ , !(names(fp) %in% removeTheseVars)]\n\n\n\nRemove all rows when a variable contains a certain value\nUsing bracket notation\n\nnew_fp &lt;- fp[!grepl(\"Jay\", fp$author), ]\n\nUsing the subset function\n\nnew_fp &lt;- subset(fp, !grepl(\"Jay\", author))\n\n\n\nRename observations in a variable based on the same variable\nThis code says that when observations in author are exactly equal to Hamilton, rename observations author to Lin-Manuel Miranda\n\nfp$author[fp$author == 'Hamilton'] &lt;- 'Lin-Manuel Miranda'\n\n\n\nRename observations in a variable based on a different variable\nThis code says, when observations in author are exactly equal to Madison, rename observations publication to Madison Wuz Here\n\nfp$publication[fp$author == 'Madison'] &lt;- 'Madison Wuz Here'\n\n\n\nCheck for NA in a variable\nWill return FALSE if no NA are present; will return TRUE if NA are present\n\nany(is.na(fp$author))\n\n[1] FALSE\n\n\n\n\nRemove all rows that contain NA in a variable\n\nnew_fp &lt;- subset(fp, !is.na(author))\n\n\n\n\nGlobal Environment Managment\n\nRemove all objects from the Global Environment\n\nrm(list = ls())\n\n\n\nSave one object from the Global Environment\n\nrm(list = setdiff(ls(), \"fp\"))\n\n\n\nSave multiple objects from the Global Environment\n\nrm(list = setdiff(ls(), c(\"fp\", \"obj2\", \"obj3\")))"
  },
  {
    "objectID": "r_2_regex.html",
    "href": "r_2_regex.html",
    "title": "Regular Expressions in R",
    "section": "",
    "text": "What is a regular expression?"
  },
  {
    "objectID": "stata_1_dmc.html",
    "href": "stata_1_dmc.html",
    "title": "Data Managment & Cleaning",
    "section": "",
    "text": "Load in a dataset\n\nuse \"filepath/dataset.dta\", clear"
  },
  {
    "objectID": "r_1_dmc.html#make-a-new-univariate-or-multivariate-dataframe-using-from-an-old-dataframe",
    "href": "r_1_dmc.html#make-a-new-univariate-or-multivariate-dataframe-using-from-an-old-dataframe",
    "title": "Data Managment & Cleaning",
    "section": "",
    "text": "# a few options that all do the same thing\n\n# using bracket notation\nnew_fp = fp[, \"author\", drop = FALSE] \n\n# using the subset() function\nnew_fp = subset(fp, select = author)",
    "crumbs": [
      "Home",
      "R",
      "Data Managment & Cleaning"
    ]
  },
  {
    "objectID": "r_1_dmc.html#make-a-new-univariate-or-multivariate-dataframe-using-an-existing-dataframe",
    "href": "r_1_dmc.html#make-a-new-univariate-or-multivariate-dataframe-using-an-existing-dataframe",
    "title": "Data Managment & Cleaning",
    "section": "",
    "text": "# a few options that all do the same thing\n\n# using bracket notation\nnew_fp = fp[, \"author\", drop = FALSE] \n\n# using the subset() function\nnew_fp = subset(fp, select = author)",
    "crumbs": [
      "Home",
      "R",
      "Data Managment & Cleaning"
    ]
  },
  {
    "objectID": "scdb_r.html",
    "href": "scdb_r.html",
    "title": "R",
    "section": "",
    "text": "This page contains R code to work with the Supreme Court Database\n\nscdb = read.csv()"
  },
  {
    "objectID": "scdb_2_r.html",
    "href": "scdb_2_r.html",
    "title": "R Code",
    "section": "",
    "text": "Attaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nCreate a justiceLastName variable based on the justiceName variable\n\nscdb_jc$justiceLastName &lt;- sub(\".*?([A-Z][a-z]+)[0-9]*$\", \"\\\\1\", scdb_jc$justiceName)\n\nCreate a table to compare the justiceName variable to the justiceLastName variable\n\nprint(unique(scdb_jc[, c(\"justiceName\", \"justiceLastName\")]), row.names = FALSE)\n\n  justiceName justiceLastName\n     HHBurton          Burton\n    RHJackson         Jackson\n    WODouglas         Douglas\n FFrankfurter     Frankfurter\n       SFReed            Reed\n      HLBlack           Black\n   WBRutledge        Rutledge\n      FMurphy          Murphy\n     FMVinson          Vinson\n      TCClark           Clark\n      SMinton          Minton\n      EWarren          Warren\n     JHarlan2          Harlan\n    WJBrennan         Brennan\n  CEWhittaker       Whittaker\n     PStewart         Stewart\n      BRWhite           White\n   AJGoldberg        Goldberg\n      AFortas          Fortas\n    TMarshall        Marshall\n     WEBurger          Burger\n   HABlackmun        Blackmun\n     LFPowell          Powell\n  WHRehnquist       Rehnquist\n    JPStevens         Stevens\n    SDOConnor          Connor\n      AScalia          Scalia\n    AMKennedy         Kennedy\n     DHSouter          Souter\n      CThomas          Thomas\n   RBGinsburg        Ginsburg\n     SGBreyer          Breyer\n    JGRoberts         Roberts\n      SAAlito           Alito\n   SSotomayor       Sotomayor\n       EKagan           Kagan\n    NMGorsuch         Gorsuch\n  BMKavanaugh       Kavanaugh\n    ACBarrett         Barrett\n    KBJackson         Jackson\n\n\n\n\nNumber of decisions per term\n\n# library(dplyr)\nscdb_cc %&gt;%\ngroup_by(term) %&gt;%\nsummarize(totalDecisions = length(unique(caseId))) %&gt;%\nhead(10)\n\n# A tibble: 10 × 2\n    term totalDecisions\n   &lt;int&gt;          &lt;int&gt;\n 1  1946            142\n 2  1947            118\n 3  1948            127\n 4  1949            100\n 5  1950            103\n 6  1951            100\n 7  1952            122\n 8  1953             87\n 9  1954             98\n10  1955            106\n\n\n\n\nReferences\n\nHarold J. Spaeth, Lee Epstein, Michael J. Nelson, Andrew D. Martin, Jeffrey A. Segal, Theodore J. Ruger, and Sara C. Benesh. 2024. Supreme Court Database, Version 2024 Release 01. URL: https://scdb.psu.edu"
  },
  {
    "objectID": "scdb_1_prereq.html",
    "href": "scdb_1_prereq.html",
    "title": "Prerequisites",
    "section": "",
    "text": "Spaeth et al.’s (2024) Supreme Court Database (hereafter SCDB) provides scholars with a treaure trove of data on the U.S. Supreme Court. Political scientitst studying the Court frequently rely on the SCDB to find a host of information about cases and the justices. Acquring desired information from the SCDB often requires parsing through the database by executing lines of code. In this section, I have included a variety of lines of code that can be used on SCDB to acquire information, create different variables, and more.\nMost code uses the Modern Database, which includes cases from the 1946-2023 terms. The code either use the Case Centered Citation data or the Justice Centered Citation data depending on the goal of the code.\nTo run the code, you need to download the latest version of both SCDB datasets which can be found at the SCDB’s website here. As of July 13, 2025, the latest data come from Version 2024 Release 01, released on October 1, 2024.\nI use the .csv files of both dataset in R and the .dta files in Stata. In R, the Case Centered data object appears as scdb_cc and the Justice Centered data object appears as scdb_jc.\nAll data come from Spaeth et al. (2024). If you use this code to work with the SCDB, please properly cite Spaeth et al. (2024):\n\nHarold J. Spaeth, Lee Epstein, Michael J. Nelson, Andrew D. Martin, Jeffrey A. Segal, Theodore J. Ruger, and Sara C. Benesh. 2024. Supreme Court Database, Version 2024 Release 01. URL: https://scdb.psu.edu\n\n\nLoading in the data in R\nCase Centered data\n\nscdb_cc = read.csv(\"SCDB_2024_01_caseCentered_Citation.csv\")\n\nJustice Centered data\n\nscdb_jc = read.csv(\"SCDB_2024_01_justiceCentered_Citation.csv\")\n\n\n\nLoading in the data in Stata\nCase Centered data\n\nuse \"SCDB_2024_01_caseCentered_Citation.dta\", clear\n\nJustice Centered data\n\nuse \"SCDB_2024_01_justiceCentered_Citation.dta\", clear\n\n\n\nReferences\n\nHarold J. Spaeth, Lee Epstein, Michael J. Nelson, Andrew D. Martin, Jeffrey A. Segal, Theodore J. Ruger, and Sara C. Benesh. 2024. Supreme Court Database, Version 2024 Release 01. URL: https://scdb.psu.edu"
  }
]